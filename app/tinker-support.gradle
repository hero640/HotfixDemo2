apply plugin: 'com.tencent.bugly.tinker-support'
apply plugin: 'com.tencent.tinker.patch'

// 定义旧基准包的路径
def baseApkPath = file("${buildDir}/bakApk/")

// 基准包名称
def baseApkFileName = "app-release-0116-18-15-45.apk"

// 基准包混淆文件
def baseApkProMappingFileName = "app-release-0116-18-15-45-mapping.txt"

// 基准包资源文件
def baseApkResMappingFileName = "app-release-0116-18-15-45-R.txt"

/**
 * 通用配置
 */
ext {
    tinkerEnabled = true
    tinkerOldApkPath = "${baseApkPath}/${baseApkFileName}"
    // proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${baseApkPath}/${baseApkProMappingFileName}"

    // resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${baseApkPath}/${baseApkResMappingFileName}"

    // only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${baseApkPath}/app-1124-23-03-52"
}

// 全局信息相关配置项
tinkerPatch {
    oldApk = getOldApkPath() //必选， 基准包路径
    ignoreWarning = false // 可选，默认false
    useSign = true // 可选，默认true， 验证基准apk和patch签名是否一致

    // 编译相关配置项
    buildConfig {
        applyMapping = getApplyMappingPath() //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式
        applyResourceMapping = getApplyResourceMappingPath() // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
        tinkerId = getTinkerIdValue() // 必选，默认为null
    }


    // 如果只用我们提供的插件，可以进行以下配置
//    apply plugin: 'com.tencent.bugly.tinker-support'
//
//    tinkerSupport {
//
//        // 开启tinker-support插件，默认值true
//        enable = true
//
//        // 是否编译完成后，归档apk到指定目录，默认值false
//        autoBackupApk = false
//        // 指定归档目录，默认值当前module的子目录tinker
//        // backupApkDir = 'tinker'
//
//        // 是否启用覆盖tinkerPatch配置功能，默认值false
//        // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
//        overrideTinkerPatchConfiguration = true
//
//        // 编译补丁包时，必需指定基线版本的apk，默认值为空
//        // 如果为空，则表示不是进行补丁包的编译
//        // @{link tinkerPatch.oldApk }
//        baseApk = getOldApkPath()
//
//        // 对应tinker插件applyMapping
//        baseApkProguardMapping = getApplyMappingPath()
//
//        // 对应tinker插件applyResourceMapping
//        baseApkResourceMapping = getApplyResourceMappingPath()
//
//        // tinkerId,唯一标识
//        tinkerId = getTinkerIdValue();
//    }

}

//List<String> flavors = new ArrayList<>();
//project.android.productFlavors.each { flavor ->
//    flavors.add(flavor.name)
//}
//boolean hasFlavors = flavors.size() > 0

/**
 * bak apk and mapping
 * 备份release包的资源、mapping文件
 */
//android.applicationVariants.all { variant ->
//    /**
//     * task type, you want to bak
//     */
//    def taskName = variant.name
//    def date = new Date().format("MMdd-HH-mm-ss")
//
//    tasks.all {
//        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
//            it.doLast {
//                copy {
//                    def fileNamePrefix = "${project.name}-${variant.baseName}"
//                    def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"
//
//                    def destPath = hasFlavors ? file("${baseApkPath}/${project.name}-${date}/${variant.flavorName}") : baseApkPath
//                    from variant.outputs.outputFile
//                    into destPath
//                    rename { String fileName ->
//                        fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
//                    }
//
//                    from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
//                    into destPath
//                    rename { String fileName ->
//                        fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
//                    }
//
//                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
//                    into destPath
//                    rename { String fileName ->
//                        fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
//                    }
//                }
//            }
//        }
//    }
//}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : getTinkerId()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

def getTinkerId() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}
